#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è" –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ –≤ Spotify
"""

import os
import json
import time
from typing import List, Dict, Optional
from yandex_music import Client as YandexClient
import spotipy
from spotipy.oauth2 import SpotifyOAuth
from difflib import SequenceMatcher


class MusicTransfer:
    def __init__(self, yandex_token: str, spotify_client_id: str, 
                 spotify_client_secret: str, spotify_redirect_uri: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ –∏ Spotify
        
        Args:
            yandex_token: –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ
            spotify_client_id: Client ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Spotify
            spotify_client_secret: Client Secret –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Spotify
            spotify_redirect_uri: URI –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        self.yandex_client = YandexClient(yandex_token).init()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Spotify
        scope = "playlist-modify-public playlist-modify-private"
        self.spotify_client = spotipy.Spotify(auth_manager=SpotifyOAuth(
            client_id=spotify_client_id,
            client_secret=spotify_client_secret,
            redirect_uri=spotify_redirect_uri,
            scope=scope
        ))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self._verify_connections()
    
    def _verify_connections(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏
            account = self.yandex_client.me.account
            if account:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {account.display_name})")
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Spotify
            user = self.spotify_client.current_user()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Spotify (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['display_name'] or user['id']})")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            if "401" in str(e) or "Unauthorized" in str(e):
                print("üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤.")
                print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏:")
                print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://music.yandex.ru/ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
                print("   2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
                print("   3. –û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)")
                print("   4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Network")
                print("   5. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                print("   6. –ù–∞–π–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∫ 'music-web.yandex.net'")
                print("   7. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ü–û–õ–ù–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ 'Authorization'")
                print("   8. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ config.py –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é YANDEX_MUSIC_TOKEN")
            raise
    
    def get_yandex_liked_tracks(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–∞—Ö
        """
        try:
            print("üéµ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ç—Ä–µ–∫–∏
            liked_tracks = self.yandex_client.users_likes_tracks()
            
            tracks_info = []
            for track_short in liked_tracks:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
                track = track_short.fetch_track()
                
                if track and track.title:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–µ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    track_info = {
                        'title': track.title,
                        'artist': ', '.join([artist.name for artist in track.artists]),
                        'album': track.albums[0].title if track.albums else '',
                        'duration_ms': track.duration_ms,
                        'yandex_id': track.id
                    }
                    tracks_info.append(track_info)
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(tracks_info)} –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ç—Ä–µ–∫–æ–≤")
            return tracks_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏: {e}")
            return []
    
    def search_spotify_track(self, title: str, artist: str, album: str = '') -> Optional[str]:
        """
        –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –≤ Spotify
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            artist: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            album: –ê–ª—å–±–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Spotify URI —Ç—Ä–µ–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        try:
            # –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            search_queries = [
                f'track:"{title}" artist:"{artist}"',
                f'"{title}" "{artist}"',
                f'{title} {artist}',
                f'track:"{title}"' if len(title) > 3 else None
            ]
            
            # –£–¥–∞–ª—è–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            search_queries = [q for q in search_queries if q]
            
            for query in search_queries:
                results = self.spotify_client.search(q=query, type='track', limit=10)
                
                if results['tracks']['items']:
                    # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫
                    best_match = self._find_best_match(
                        title, artist, results['tracks']['items']
                    )
                    
                    if best_match:
                        return best_match['uri']
            
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–∫–∞ '{title}' - '{artist}': {e}")
            return None
    
    def _find_best_match(self, target_title: str, target_artist: str, 
                        candidates: List[Dict]) -> Optional[Dict]:
        """
        –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–∫–∞ —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        
        Args:
            target_title: –¶–µ–ª–µ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            target_artist: –¶–µ–ª–µ–≤–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            candidates: –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ Spotify
            
        Returns:
            –ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–∫ –∏–ª–∏ None
        """
        best_score = 0
        best_match = None
        
        for track in candidates:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            title_similarity = SequenceMatcher(
                None, target_title.lower(), track['name'].lower()
            ).ratio()
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            track_artists = [artist['name'].lower() for artist in track['artists']]
            artist_similarity = max([
                SequenceMatcher(None, target_artist.lower(), artist).ratio() 
                for artist in track_artists
            ], default=0)
            
            # –û–±—â–∏–π —Å–∫–æ—Ä (–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∂–Ω–µ–µ)
            total_score = title_similarity * 0.7 + artist_similarity * 0.3
            
            if total_score > best_score and total_score > 0.6:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
                best_score = total_score
                best_match = track
        
        return best_match
    
    def create_spotify_playlist(self, name: str, tracks: List[str], 
                              description: str = None) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ Spotify
        
        Args:
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            tracks: –°–ø–∏—Å–æ–∫ Spotify URI —Ç—Ä–µ–∫–æ–≤
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
            
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        """
        try:
            user_id = self.spotify_client.current_user()['id']
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
            playlist = self.spotify_client.user_playlist_create(
                user=user_id,
                name=name,
                description=description or f"–ü–ª–µ–π–ª–∏—Å—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ ({len(tracks)} —Ç—Ä–µ–∫–æ–≤)"
            )
            
            playlist_id = playlist['id']
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–ª–µ–π–ª–∏—Å—Ç: {name}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –ø–æ—Ä—Ü–∏—è–º–∏ (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞ —Ä–∞–∑)
            batch_size = 100
            for i in range(0, len(tracks), batch_size):
                batch = tracks[i:i + batch_size]
                self.spotify_client.playlist_add_items(playlist_id, batch)
                print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ {len(batch)} —Ç—Ä–µ–∫–æ–≤ (–≤—Å–µ–≥–æ: {min(i + batch_size, len(tracks))}/{len(tracks)})")
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            
            return playlist_id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            raise
    
    def transfer_playlist(self, playlist_name: str = "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è (–∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏)"):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        
        Args:
            playlist_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ Spotify
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏
        yandex_tracks = self.get_yandex_liked_tracks()
        
        if not yandex_tracks:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏")
            return
        
        # –ò—â–µ–º —Ç—Ä–µ–∫–∏ –≤ Spotify
        spotify_tracks = []
        not_found_tracks = []
        
        print("üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –≤ Spotify...")
        for i, track in enumerate(yandex_tracks, 1):
            print(f"[{i}/{len(yandex_tracks)}] –ò—â–µ–º: {track['artist']} - {track['title']}")
            
            spotify_uri = self.search_spotify_track(
                track['title'], track['artist'], track['album']
            )
            
            if spotify_uri:
                spotify_tracks.append(spotify_uri)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω")
            else:
                not_found_tracks.append(track)
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.1)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        if spotify_tracks:
            playlist_id = self.create_spotify_playlist(
                name=playlist_name,
                tracks=spotify_tracks,
                description=f"–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏. –ù–∞–π–¥–µ–Ω–æ: {len(spotify_tracks)}/{len(yandex_tracks)} —Ç—Ä–µ–∫–æ–≤"
            )
            
            print(f"\nüéâ –ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤ –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ: {len(yandex_tracks)}")
            print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –≤ Spotify: {len(spotify_tracks)}")
            print(f"   ‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(not_found_tracks)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        if not_found_tracks:
            self._save_not_found_tracks(not_found_tracks)
    
    def _save_not_found_tracks(self, tracks: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
        try:
            with open('not_found_tracks.json', 'w', encoding='utf-8') as f:
                json.dump(tracks, f, ensure_ascii=False, indent=2)
            print(f"üìÑ –°–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ not_found_tracks.json")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéµ –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ –≤ Spotify")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    yandex_token = os.getenv('YANDEX_MUSIC_TOKEN')
    spotify_client_id = os.getenv('SPOTIFY_CLIENT_ID')
    spotify_client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
    spotify_redirect_uri = os.getenv('SPOTIFY_REDIRECT_URI', 'http://localhost:8888/callback')
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    if not yandex_token:
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://music.yandex.ru/")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Network -> –Ω–∞–π–¥–∏—Ç–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ music-web.yandex.net")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization")
        yandex_token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏: ").strip()
    
    if not spotify_client_id or not spotify_client_secret:
        print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Spotify –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://developer.spotify.com/dashboard/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("3. –î–æ–±–∞–≤—å—Ç–µ Redirect URI: http://localhost:8888/callback")
        
        if not spotify_client_id:
            spotify_client_id = input("–í–≤–µ–¥–∏—Ç–µ Spotify Client ID: ").strip()
        if not spotify_client_secret:
            spotify_client_secret = input("–í–≤–µ–¥–∏—Ç–µ Spotify Client Secret: ").strip()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
        transfer = MusicTransfer(
            yandex_token=yandex_token,
            spotify_client_id=spotify_client_id,
            spotify_client_secret=spotify_client_secret,
            spotify_redirect_uri=spotify_redirect_uri
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å
        transfer.transfer_playlist()
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main() 