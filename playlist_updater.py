#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ Spotify –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏.
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ.
"""

import os
import json
import time
from typing import List, Dict, Optional, Tuple, Set
from difflib import SequenceMatcher
from music_transfer import MusicTransfer


class PlaylistUpdater(MusicTransfer):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ Spotify –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏.
    –ù–∞—Å–ª–µ–¥—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å MusicTransfer –∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –µ—ë.
    """
    
    def __init__(self, yandex_token: str, spotify_client_id: str, 
                 spotify_client_secret: str, spotify_redirect_uri: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        
        Args:
            yandex_token: –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ
            spotify_client_id: Client ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Spotify
            spotify_client_secret: Client Secret –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Spotify
            spotify_redirect_uri: URI –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        super().__init__(yandex_token, spotify_client_id, spotify_client_secret, spotify_redirect_uri)
    
    def get_user_playlists(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Spotify
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–µ–π–ª–∏—Å—Ç–∞—Ö
        """
        try:
            playlists = []
            offset = 0
            limit = 50
            
            while True:
                results = self.spotify_client.current_user_playlists(limit=limit, offset=offset)
                playlists.extend(results['items'])
                
                if len(results['items']) < limit:
                    break
                offset += limit
            
            return playlists
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {e}")
            return []
    
    def find_playlist_by_name(self, playlist_name: str) -> Optional[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        
        Args:
            playlist_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        playlists = self.get_user_playlists()
        
        for playlist in playlists:
            if playlist['name'].lower() == playlist_name.lower():
                return playlist
        
        return None
    
    def get_playlist_tracks(self, playlist_id: str) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ Spotify
        
        Args:
            playlist_id: ID –ø–ª–µ–π–ª–∏—Å—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–∞—Ö
        """
        try:
            tracks_info = []
            offset = 0
            limit = 100
            
            while True:
                results = self.spotify_client.playlist_items(
                    playlist_id, limit=limit, offset=offset
                )
                
                for item in results['items']:
                    track = item['track']
                    if track and track['type'] == 'track':
                        track_info = {
                            'title': track['name'],
                            'artist': ', '.join([artist['name'] for artist in track['artists']]),
                            'album': track['album']['name'],
                            'spotify_id': track['id'],
                            'spotify_uri': track['uri']
                        }
                        tracks_info.append(track_info)
                
                if len(results['items']) < limit:
                    break
                offset += limit
            
            return tracks_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return []
    
    def normalize_track_info(self, title: str, artist: str) -> str:
        """
        –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        
        Args:
            title: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            artist: –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            
        Returns:
            –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        normalized_title = title.lower().strip()
        normalized_artist = artist.lower().strip()
        
        # –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        import re
        normalized_title = re.sub(r'[^\w\s]', '', normalized_title)
        normalized_artist = re.sub(r'[^\w\s]', '', normalized_artist)
        
        # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
        normalized_title = re.sub(r'\s+', ' ', normalized_title)
        normalized_artist = re.sub(r'\s+', ' ', normalized_artist)
        
        return f"{normalized_artist} - {normalized_title}"
    
    def is_track_similar(self, track1: Dict, track2: Dict, similarity_threshold: float = 0.85) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–≤—É—Ö —Ç—Ä–µ–∫–æ–≤
        
        Args:
            track1: –ü–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            track2: –í—Ç–æ—Ä–æ–π —Ç—Ä–µ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            similarity_threshold: –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (0.0 - 1.0)
            
        Returns:
            True –µ—Å–ª–∏ —Ç—Ä–µ–∫–∏ —Å—Ö–æ–∂–∏, False –∏–Ω–∞—á–µ
        """
        normalized1 = self.normalize_track_info(track1['title'], track1['artist'])
        normalized2 = self.normalize_track_info(track2['title'], track2['artist'])
        
        similarity = SequenceMatcher(None, normalized1, normalized2).ratio()
        
        return similarity >= similarity_threshold
    
    def find_missing_tracks(self, yandex_tracks: List[Dict], 
                          spotify_tracks: List[Dict]) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ Spotify –ø–ª–µ–π–ª–∏—Å—Ç–µ
        
        Args:
            yandex_tracks: –¢—Ä–µ–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏
            spotify_tracks: –¢—Ä–µ–∫–∏ –∏–∑ Spotify –ø–ª–µ–π–ª–∏—Å—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ Spotify –ø–ª–µ–π–ª–∏—Å—Ç–µ
        """
        missing_tracks = []
        
        print(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤...")
        print(f"   ‚Ä¢ –¢—Ä–µ–∫–æ–≤ –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ: {len(yandex_tracks)}")
        print(f"   ‚Ä¢ –¢—Ä–µ–∫–æ–≤ –≤ Spotify –ø–ª–µ–π–ª–∏—Å—Ç–µ: {len(spotify_tracks)}")
        
        for yandex_track in yandex_tracks:
            found_similar = False
            
            for spotify_track in spotify_tracks:
                if self.is_track_similar(yandex_track, spotify_track):
                    found_similar = True
                    break
            
            if not found_similar:
                missing_tracks.append(yandex_track)
        
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤: {len(missing_tracks)}")
        return missing_tracks
    
    def update_spotify_playlist(self, playlist_id: str, new_tracks: List[str]) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç Spotify
        
        Args:
            playlist_id: ID –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            new_tracks: –°–ø–∏—Å–æ–∫ Spotify URI –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, False –∏–Ω–∞—á–µ
        """
        try:
            if not new_tracks:
                print("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
                return True
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –ø–æ—Ä—Ü–∏—è–º–∏ (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞ —Ä–∞–∑)
            batch_size = 100
            total_added = 0
            
            for i in range(0, len(new_tracks), batch_size):
                batch = new_tracks[i:i + batch_size]
                self.spotify_client.playlist_add_items(playlist_id, batch)
                total_added += len(batch)
                print(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ {len(batch)} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ (–≤—Å–µ–≥–æ: {total_added}/{len(new_tracks)})")
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
            return False
    
    def update_playlist_from_yandex(self, playlist_name: str, 
                                  create_if_not_exists: bool = False) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏
        
        Args:
            playlist_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ Spotify –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            create_if_not_exists: –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω, False –∏–Ω–∞—á–µ
        """
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏
        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏...")
        yandex_tracks = self.get_yandex_liked_tracks()
        
        if not yandex_tracks:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏")
            return False
        
        # –ò—â–µ–º –ø–ª–µ–π–ª–∏—Å—Ç –≤ Spotify
        print(f"üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}' –≤ Spotify...")
        playlist = self.find_playlist_by_name(playlist_name)
        
        if not playlist:
            if create_if_not_exists:
                print(f"üìù –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
                spotify_uris = []
                not_found_tracks = []
                
                print("üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–æ–≤ –≤ Spotify...")
                for i, track in enumerate(yandex_tracks, 1):
                    print(f"[{i}/{len(yandex_tracks)}] –ò—â–µ–º: {track['artist']} - {track['title']}")
                    
                    spotify_uri = self.search_spotify_track(
                        track['title'], track['artist'], track['album']
                    )
                    
                    if spotify_uri:
                        spotify_uris.append(spotify_uri)
                        print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω")
                    else:
                        not_found_tracks.append(track)
                        print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
                    
                    time.sleep(0.1)
                
                if spotify_uris:
                    self.create_spotify_playlist(
                        name=playlist_name,
                        tracks=spotify_uris,
                        description=f"–ü–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–æ–π"
                    )
                    
                    if not_found_tracks:
                        self._save_not_found_tracks(not_found_tracks)
                    
                    return True
                else:
                    print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞")
                    return False
            else:
                print(f"‚ùå –ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        print("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞...")
        spotify_tracks = self.get_playlist_tracks(playlist['id'])
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç—Ä–µ–∫–∏
        missing_tracks = self.find_missing_tracks(yandex_tracks, spotify_tracks)
        
        if not missing_tracks:
            print("‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω, –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        # –ò—â–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç—Ä–µ–∫–∏ –≤ Spotify
        print(f"üîç –ü–æ–∏—Å–∫ {len(missing_tracks)} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ Spotify...")
        new_spotify_uris = []
        not_found_tracks = []
        
        for i, track in enumerate(missing_tracks, 1):
            print(f"[{i}/{len(missing_tracks)}] –ò—â–µ–º: {track['artist']} - {track['title']}")
            
            spotify_uri = self.search_spotify_track(
                track['title'], track['artist'], track['album']
            )
            
            if spotify_uri:
                new_spotify_uris.append(spotify_uri)
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω")
            else:
                not_found_tracks.append(track)
                print(f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
            
            time.sleep(0.1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
        if new_spotify_uris:
            success = self.update_spotify_playlist(playlist['id'], new_spotify_uris)
            
            if success:
                print(f"\nüéâ –ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                print(f"   ‚Ä¢ –¢—Ä–µ–∫–æ–≤ –±—ã–ª–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ: {len(spotify_tracks)}")
                print(f"   ‚Ä¢ –ù–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(new_spotify_uris)}")
                print(f"   ‚Ä¢ –¢—Ä–µ–∫–æ–≤ —Å—Ç–∞–ª–æ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ: {len(spotify_tracks) + len(new_spotify_uris)}")
                print(f"   ‚Ä¢ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Spotify: {len(not_found_tracks)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                if not_found_tracks:
                    self._save_not_found_tracks(not_found_tracks, 
                                              filename=f'update_not_found_tracks_{int(time.time())}.json')
                
                return True
        
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        return False
    
    def _save_not_found_tracks(self, tracks: List[Dict], 
                             filename: str = 'not_found_tracks.json'):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        
        Args:
            tracks: –°–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
            filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(tracks, f, ensure_ascii=False, indent=2)
            print(f"üìÑ –°–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {e}")
    
    def show_playlists_menu(self) -> Optional[str]:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–ª–∏ None
        """
        playlists = self.get_user_playlists()
        
        if not playlists:
            print("‚ùå –ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        print("\nüìã –í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –≤ Spotify:")
        print("-" * 50)
        
        for i, playlist in enumerate(playlists, 1):
            track_count = playlist['tracks']['total']
            print(f"{i:2d}. {playlist['name']} ({track_count} —Ç—Ä–µ–∫–æ–≤)")
        
        print(f"{len(playlists) + 1:2d}. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")
        print(" 0. –û—Ç–º–µ–Ω–∞")
        
        while True:
            try:
                choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç (1-{len(playlists) + 1}, 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã): ").strip()
                
                if choice == '0':
                    return None
                
                choice_num = int(choice)
                
                if choice_num == len(playlists) + 1:
                    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
                    new_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞: ").strip()
                    if new_name:
                        return new_name
                    else:
                        print("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                        continue
                
                if 1 <= choice_num <= len(playlists):
                    return playlists[choice_num - 1]['name']
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            except KeyboardInterrupt:
                print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ Spotify –∏–∑ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    yandex_token = os.getenv('YANDEX_MUSIC_TOKEN')
    spotify_client_id = os.getenv('SPOTIFY_CLIENT_ID')
    spotify_client_secret = os.getenv('SPOTIFY_CLIENT_SECRET')
    spotify_redirect_uri = os.getenv('SPOTIFY_REDIRECT_URI', 'http://localhost:8888/callback')
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
    if not yandex_token:
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://music.yandex.ru/")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (F12)")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Network -> –Ω–∞–π–¥–∏—Ç–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∫ music-web.yandex.net")
        print("4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Authorization")
        yandex_token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏: ").strip()
    
    if not spotify_client_id or not spotify_client_secret:
        print("\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ Spotify –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://developer.spotify.com/dashboard/")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("3. –î–æ–±–∞–≤—å—Ç–µ Redirect URI: http://localhost:8888/callback")
        
        if not spotify_client_id:
            spotify_client_id = input("–í–≤–µ–¥–∏—Ç–µ Spotify Client ID: ").strip()
        if not spotify_client_secret:
            spotify_client_secret = input("–í–≤–µ–¥–∏—Ç–µ Spotify Client Secret: ").strip()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä–∞
        updater = PlaylistUpdater(
            yandex_token=yandex_token,
            spotify_client_id=spotify_client_id,
            spotify_client_secret=spotify_client_secret,
            spotify_redirect_uri=spotify_redirect_uri
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
        playlist_name = updater.show_playlists_menu()
        
        if playlist_name:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            updater.update_playlist_from_yandex(
                playlist_name=playlist_name,
                create_if_not_exists=True
            )
        else:
            print("üëã –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()